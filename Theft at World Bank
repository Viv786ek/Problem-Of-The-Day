class Solution{
	public:
	long double maximumProfit(int N, long long C, vector<long long> w, vector<long long> p){
	   multimap<double,long long,greater<double>>mp;
       double r,t;
       int x;
       for (int i=0; i<N; i++) {
           x=t=sqrt(w[i]);
           if (x==t) {
           continue;
           }
           else {
               r=(double)p[i]/w[i];
           mp.insert(pair<double,long long>(r,w[i]));
           }
       }
       long double pro=0.0;
       long long s=C;
       auto i=mp.begin();
       for (; i!=mp.end(); i++) {
           if (i->second>C) {
           break;
           }
           else {
           pro+= (double)((i->first)*(i->second));
           C=C-(i->second);
           }
       }
       if (i!=mp.end()) {
       pro+=(double)(C*i->first);
       }
       return pro;
	}
};
